/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AuthKeyService } from "../authKey.service";
import { AuthKeyCreateInput } from "./AuthKeyCreateInput";
import { AuthKey } from "./AuthKey";
import { AuthKeyFindManyArgs } from "./AuthKeyFindManyArgs";
import { AuthKeyWhereUniqueInput } from "./AuthKeyWhereUniqueInput";
import { AuthKeyUpdateInput } from "./AuthKeyUpdateInput";
import { PlayerWhereUniqueInput } from "../../player/base/PlayerWhereUniqueInput";

export class AuthKeyControllerBase {
  constructor(protected readonly service: AuthKeyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AuthKey })
  async createAuthKey(
    @common.Body() data: AuthKeyCreateInput
  ): Promise<AuthKey> {
    return await this.service.createAuthKey({
      data: {
        ...data,

        player: data.player
          ? {
              connect: data.player,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        validUntil: true,
        key: true,

        player: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AuthKey] })
  @ApiNestedQuery(AuthKeyFindManyArgs)
  async authKeys(@common.Req() request: Request): Promise<AuthKey[]> {
    const args = plainToClass(AuthKeyFindManyArgs, request.query);
    return this.service.authKeys({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        validUntil: true,
        key: true,

        player: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AuthKey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async authKey(
    @common.Param() params: AuthKeyWhereUniqueInput
  ): Promise<AuthKey | null> {
    const result = await this.service.authKey({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        validUntil: true,
        key: true,

        player: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AuthKey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAuthKey(
    @common.Param() params: AuthKeyWhereUniqueInput,
    @common.Body() data: AuthKeyUpdateInput
  ): Promise<AuthKey | null> {
    try {
      return await this.service.updateAuthKey({
        where: params,
        data: {
          ...data,

          player: data.player
            ? {
                connect: data.player,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          validUntil: true,
          key: true,

          player: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AuthKey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAuthKey(
    @common.Param() params: AuthKeyWhereUniqueInput
  ): Promise<AuthKey | null> {
    try {
      return await this.service.deleteAuthKey({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          validUntil: true,
          key: true,

          player: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/generate-key")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GenerateKey(
    @common.Body()
    body: PlayerWhereUniqueInput
  ): Promise<string> {
    return this.service.GenerateKey(body);
  }

  @common.Post("/verify-key")
  @swagger.ApiOkResponse({
    type: Boolean,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async VerifyKey(
    @common.Body()
    body: PlayerWhereUniqueInput
  ): Promise<boolean> {
    return this.service.VerifyKey(body);
  }
}
