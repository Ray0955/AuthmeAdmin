/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AuthKey } from "./AuthKey";
import { AuthKeyCountArgs } from "./AuthKeyCountArgs";
import { AuthKeyFindManyArgs } from "./AuthKeyFindManyArgs";
import { AuthKeyFindUniqueArgs } from "./AuthKeyFindUniqueArgs";
import { CreateAuthKeyArgs } from "./CreateAuthKeyArgs";
import { UpdateAuthKeyArgs } from "./UpdateAuthKeyArgs";
import { DeleteAuthKeyArgs } from "./DeleteAuthKeyArgs";
import { Player } from "../../player/base/Player";
import { PlayerCreateInput } from "../../player/base/PlayerCreateInput";
import { PlayerWhereUniqueInput } from "../../player/base/PlayerWhereUniqueInput";
import { AuthKeyService } from "../authKey.service";
@graphql.Resolver(() => AuthKey)
export class AuthKeyResolverBase {
  constructor(protected readonly service: AuthKeyService) {}

  async _authKeysMeta(
    @graphql.Args() args: AuthKeyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AuthKey])
  async authKeys(
    @graphql.Args() args: AuthKeyFindManyArgs
  ): Promise<AuthKey[]> {
    return this.service.authKeys(args);
  }

  @graphql.Query(() => AuthKey, { nullable: true })
  async authKey(
    @graphql.Args() args: AuthKeyFindUniqueArgs
  ): Promise<AuthKey | null> {
    const result = await this.service.authKey(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AuthKey)
  async createAuthKey(
    @graphql.Args() args: CreateAuthKeyArgs
  ): Promise<AuthKey> {
    return await this.service.createAuthKey({
      ...args,
      data: {
        ...args.data,

        player: args.data.player
          ? {
              connect: args.data.player,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AuthKey)
  async updateAuthKey(
    @graphql.Args() args: UpdateAuthKeyArgs
  ): Promise<AuthKey | null> {
    try {
      return await this.service.updateAuthKey({
        ...args,
        data: {
          ...args.data,

          player: args.data.player
            ? {
                connect: args.data.player,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AuthKey)
  async deleteAuthKey(
    @graphql.Args() args: DeleteAuthKeyArgs
  ): Promise<AuthKey | null> {
    try {
      return await this.service.deleteAuthKey(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Player, {
    nullable: true,
    name: "player",
  })
  async getPlayer(@graphql.Parent() parent: AuthKey): Promise<Player | null> {
    const result = await this.service.getPlayer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => String)
  async GenerateKey(
    @graphql.Args()
    args: PlayerCreateInput
  ): Promise<string> {
    return this.service.GenerateKey(args);
  }

  @graphql.Query(() => Boolean)
  async VerifyKey(
    @graphql.Args()
    args: PlayerWhereUniqueInput
  ): Promise<boolean> {
    return this.service.VerifyKey(args);
  }
}
