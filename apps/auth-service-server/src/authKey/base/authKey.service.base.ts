/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AuthKey as PrismaAuthKey,
  Player as PrismaPlayer,
} from "@prisma/client";
import { PlayerCreateInput } from "../../player/base/PlayerCreateInput";
import { PlayerWhereUniqueInput } from "../../player/base/PlayerWhereUniqueInput";

export class AuthKeyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AuthKeyCountArgs, "select">): Promise<number> {
    return this.prisma.authKey.count(args);
  }

  async authKeys(args: Prisma.AuthKeyFindManyArgs): Promise<PrismaAuthKey[]> {
    return this.prisma.authKey.findMany(args);
  }
  async authKey(
    args: Prisma.AuthKeyFindUniqueArgs
  ): Promise<PrismaAuthKey | null> {
    return this.prisma.authKey.findUnique(args);
  }
  async createAuthKey(args: Prisma.AuthKeyCreateArgs): Promise<PrismaAuthKey> {
    return this.prisma.authKey.create(args);
  }
  async updateAuthKey(args: Prisma.AuthKeyUpdateArgs): Promise<PrismaAuthKey> {
    return this.prisma.authKey.update(args);
  }
  async deleteAuthKey(args: Prisma.AuthKeyDeleteArgs): Promise<PrismaAuthKey> {
    return this.prisma.authKey.delete(args);
  }

  async getPlayer(parentId: string): Promise<PrismaPlayer | null> {
    return this.prisma.authKey
      .findUnique({
        where: { id: parentId },
      })
      .player();
  }
  async GenerateKey(args: PlayerCreateInput): Promise<string> {
    throw new Error("Not implemented");
  }
  async VerifyKey(args: PlayerWhereUniqueInput): Promise<boolean> {
    throw new Error("Not implemented");
  }
}
